openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: An paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      requestBody:
        description: Create a new pet
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          text/json:
            schema:
              $ref: "#/components/schemas/Pet"
      responses:
        201:
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        201:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{petId}/photos:
    parameters:
      - name: petId
        in: path
        required: true
        description: The id of the pet
        schema:
          type: string
    post:
      operationId: postPetPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Photo"
      responses:
        200:
          description: 200RESPONSE
    get:
      operationId: listPetPhotos
      responses:
        200:
          description: Pet photos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photos"
components:
  schemas:
    RandomThing:
      required:
        - id
        - something
      properties:
        id:
          type: integer
          format: int64
        something:
          properties:
            hello:
              properties:
                one:
                  type: string
                two:
                  type: integer
                  format: int64
            world:
              type: string
            bla:
              type: array
              items:
                properties:
                  prop:
                    type: string
                  erty:
                    type: string
    Pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
          nullable: true
        petType:
          type: string
          nullable: true
          enum:
            - cat
            - doge
        nicknames:
          type: array
          items:
            properties:
              name:
                type: string
              thing:
                type: array
                items:
                  type: string
        random:
          $ref: "#/components/schemas/RandomThing"
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Animal:
      properties:
        home:
          type: string
        pet:
          $ref: "#/components/schemas/Pet"
    Cat:
      allOf:
        - $ref: "#/components/schemas/Pet"
        - type: object
          # all other properties specific to a `Cat`
          properties:
            name:
              type: string
    Dog:
      allOf:
        - $ref: "#/components/schemas/Pet"
        - type: object
          # all other properties specific to a `Dog`
          properties:
            bark:
              type: string
            fur:
              type: array
              items:
                type: array
                items:
                  type: string
    Photo:
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        date:
          type: string
    Photos:
      type: array
      items:
        $ref: "#/components/schemas/Photo"
    MyResponseType:
      oneOf:
        - $ref: "#/components/schemas/Cat"
        - $ref: "#/components/schemas/Dog"
    MyResponseTypeTwo:
      anyOf:
        - $ref: "#/components/schemas/Cat"
        - $ref: "#/components/schemas/Dog"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          description: The user ID.
        username:
          type: string
          description: The user name.
    # MyDictionary ---> { [key: string]: string }
    MyDictionary:
      type: object
      additionalProperties:
        type: string
    # MyDictionaryAny ---> { [key: string]: any }
    MyDictionaryAny:
      type: object
      additionalProperties: true # can also be `additionalProperties: {}`
    # MyDictionaryStringArray ---> { [key: string]: string[] }
    MyDictionaryStringArray:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    # MyDictionaryRef ---> { [key: string]: User }
    MyDictionaryRef:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/User"
    # MyDictionaryValue ---> { [key: string]: { code?: number; text?: string } }
    MyDictionaryValue:
      type: object
      additionalProperties:
        type: object
        properties:
          code:
            type: integer
          text:
            type: string
